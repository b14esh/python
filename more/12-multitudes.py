# множества
# список в котором нет повторяющихся элнментов

a = set()
print(type(a))
print(a)

a = set("hello")
print(type(a))
print(a)

a = {}
print(type(a))
print(a)

a = {i ** 2 for i in range (10)}
print(type(a))
print(a)


a = {i ** 2 for i in range (10)}
a = {}
print(type(a))
print(a)

a = {i ** 2 for i in range (10)}
a = {23}
print(type(a))
print(a)

frozenset()

a = set("hello")
b = frozenset("Qwerty")
a.add (1)
#b.add(1) не льзя добвать так как frozenset
print(a)
print(b)

a = ['r', 's', 'w','s','w']
print(a)
print(set(a))

a = {32, 44, 43.55, 76}
x = 44
print( x in a) #  проверка на равные значения, имеются ли  a = x = True
x = 50
print(x in a)

a = {32, 44, 43.55, 76}
x = {67, 12, 90}
print(a.isdisjoint(x)) # проверка на неравные значения , a = x = True

a = {32, 44, 43.55, 76, 90}
x = {67, 12, 90}
print(a.isdisjoint(x)) # проверка на неравные значения , a = x = True

a = {32, 44, 43.55, 76, 90}
x = {67, 12, 90}
print(a == x) # проверка на равенство, a = x = True


a = {32, 44, 43.55, 76, 90}
x = {76, 44, 43.55, 32, 90}
print(a == x) # проверка на равенство, a = x = True



#множествами можно выполнять множество операций: находить объединение, пересечение...
#len(s) - число элементов в множестве (размер множества).
#x in s - принадлежит ли x множеству s.
#set.isdisjoint(other) - истина, если set и other не имеют общих элементов.
#set == other - все элементы set принадлежат other, все элементы other принадлежат set.
#set.issubset(other) или set <= other - все элементы set принадлежат other.
#set.issuperset(other) или set >= other - аналогично.
#set.union(other, ...) или set | other | ... - объединение нескольких множеств.
#set.intersection(other, ...) или set & other & ... - пересечение.
#set.difference(other, ...) или set - other - ... - множество из всех элементов set, не принадлежащие ни одному из other.
#set.symmetric_difference(other); set ^ other - множество из элементов, встречающихся в одном множестве, но не встречающиеся в обоих.
#set.copy() - копия множества.

#И операции, непосредственно изменяющие множество:
#set.update(other, ...); set |= other | ... - объединение.
#set.intersection_update(other, ...); set &= other & ... - пересечение.
#set.difference_update(other, ...); set -= other | ... - вычитание.
#set.symmetric_difference_update(other); set ^= other - множество из элементов, встречающихся в одном множестве, но не встречающиеся в обоих.
#set.add(elem) - добавляет элемент в множество.
#set.remove(elem) - удаляет элемент из множества. KeyError, если такого элемента не существует.
#set.discard(elem) - удаляет элемент, если он находится в множестве.
#set.pop() - удаляет первый элемент из множества. Так как множества не упорядочены, нельзя точно сказать, какой элемент будет первым.
#set.clear() - очистка множества.



a = {32, 44, 43.55, 76, 90}
x = {23, 44, 43.55, 12, 90}
a.update(x) # обьединение множеств
print(a)

a = {32, 44, 43.55, 76, 90}
x = {23, 44, 43.55, 12, 90}
a.intersection_update(x) # пересечение,
print(a)

a = {32, 44, 43.55, 76, 90}
x = {23, 44, 43.55, 12, 90}
a.intersection_update(x) # сравнение, вычетание
print(a)


a = {32, 44, 43.55, 76, 90}
x = {23, 44, 43.55, 12, 90}
a.symmetric_difference_update(x) # множество из элементов, встречающихся в одном множестве, но не встречающиеся в обоих
print(a)

a = {32, 44, 43.55, 76, 90}
a.add(999) # добовление элемента в множество
print(a)

a = {32, 44, 43.55, 76, 90, 999}
a.remove(999) # удаление элемента из множества
print(a)


a = {32, 44, 43.55, 76, 90}
a.discard(32) # удаляет элемент, если он находится в множестве # remove выдает ошибку если элемента нет
print(a)


a = {32, 44, 43.55, 76, 90}
a.pop() # удаляет первый элемент !!!  элементы рандомны каждый раз, хз что она удалит в следующий раз
print(a)


a = {32, 44, 43.55, 76, 90}
a.clear() #очищает множество от всех элементов
print(a)

